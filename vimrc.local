" mouse settings
if has("mouse")
  set mouse=a
endif
set mousehide            " Hide mouse pointer on insert mode."

set hidden              " enable multiple modified buffers
set completeopt=menuone,preview
set grepprg=ack
set clipboard=unnamed   " Copy to clipboard from vim
set backspace=indent,eol,start
set autoindent          " automatically indent new line
set copyindent          " copy the previous indentation on autoindenting
set showmatch           " Show matching brackets.
set ignorecase          " Do case insensitive matching
set hlsearch            " Highlight search match
set incsearch           " do incremental searching
set smartcase           " do not ignore if search pattern has CAPS
set smarttab            " insert tabs on the start of a line according to
                        "    shiftwidth, not tabstop
set visualbell          " use visual bell instead of beeping
set noerrorbells        " don't beep"
set list
set nowrap              " Do not wrap words (view)
set wildmenu            " enhanced command completion
set wildignore=.svn,CVS,.git,.hg,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.png,*.xpm,*.gif

" keep selection after in/outdent
vnoremap < <gv
vnoremap > >gv

" remove trailing spaces
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<cr>

let g:fuzzy_ignore = "*.png;*.PNG;*.jpg;*.JPG;*.gif;vendor/**;coverage/**;tmp/**;rdoc/**"

" vim-rspec mappings
let g:rspec_command = "VtrSendCommand! rspec {spec}"

" Resize and Zoom
autocmd VimResized * :wincmd =
nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
nnoremap <leader>= :wincmd =<cr>

" delimitMate
let g:delimitMate_expand_space = 1 " Turns on/off the expansion of <Space>
let g:delimitMate_expand_cr = 1    " Turns on/off the expansion of <CR>

" nerdtree
" Ctrl-P to Display the file browser tree
nmap <C-P> :NERDTreeTabsToggle<CR>
" ,p to show current file in the tree
nmap <leader>p :NERDTreeFind<CR>
let g:NERDTreeMapJumpPrevSibling = ''
let g:NERDTreeMapJumpNextSibling = ''

" nerdcommenter
" ,/ to invert comment on the current line/selection
nmap <leader>/ :call NERDComment(0, "invert")<cr>
vmap <leader>/ :call NERDComment(0, "invert")<cr>

" yankring
let g:yankring_replace_n_pkey = '<leader>['
let g:yankring_replace_n_nkey = '<leader>]'
" ,y to show the yankring
nmap <leader>y :YRShow<cr>
" put the yankring_history file in ~/.backup
let g:yankring_history_dir = '~/.backup'

" rails
" completing Rails hangs a lot
let g:rubycomplete_rails = 1

let g:ctrlp_map = '<leader>,'
let g:ctrlp_cmd = 'CtrlP'

nmap <leader>. :CtrlPClearCache<cr>:CtrlP<cr>

let g:ctrlp_clear_cache_on_exit = 0
" ctrlp leaves stale caches behind if there is another vim process runnin
" which didn't use ctrlp. so we clear all caches on each new vim invocation
cal ctrlp#clra()

let g:ctrlp_max_height = 10

" show on top
let g:ctrlp_match_window_bottom = 1
let g:ctrlp_match_window_reversed = 1

" jump to buffer in the same tab if already open
let g:ctrlp_switch_buffer = 1

" if in git repo - use git file listing command, should be faster
"let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files --exclude-standard -cod']

let g:ctrlp_extensions = ['tag', 'buffertag', 'quickfix', 'mixed', 'line']

" vim-indentobject
" add Markdown to the list of indentation based languages
let g:indentobject_meaningful_indentation = ["haml", "sass", "python", "yaml", "markdown"]

" vim-airline
"let g:airline_theme='moriarty' " dark simple badwolf solarized solarized2
let g:airline_theme='badwolf' " dark simple badwolf solarized solarized2
let g:airline_powerline_fonts = 1
set noshowmode

" Gliphy Icons
" let g:webdevicons_enable = 1
" let g:webdevicons_enable_nerdtree = 1
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:webdevicons_conceal_nerdtree_brackets = 1
autocmd FileType nerdtree syntax match hideBracketsInNerdTree "\]" contained conceal containedin=ALL
let g:WebDevIconsNerdTreeAfterGlyphPadding = '  '

nnoremap <leader>R :Eroutes<CR>
nnoremap <leader>S :Eschema<CR>
nnoremap <leader>m :Emodel 
nnoremap <leader>v :Eview 
nnoremap <leader>c :Econtroller 
nnoremap <leader>j :Ejob 
nnoremap <leader>s :Espec 
nnoremap <leader>f :Gsearch 

" Duplicate a selection
" Visual mode: D
vmap D y'>p

" Opens a tab edit command with the path of the currently edited file filled in
" Normal mode: <Leader>t
nnoremap <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Edit routes
command! Eroutes :e config/routes.rb
command! Eschema :e db/schema.rb

nnoremap <leader>V :vsplit<CR>
nnoremap <leader>H :split<CR>
nnoremap <leader>q :q<CR>

"nnoremap <C-right> :tabnext<CR>
"nnoremap <C-left> :tabprevious<CR>

syntax enable
colorscheme gruvbox
set background=dark

